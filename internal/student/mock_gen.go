// Code generated by MockGen. DO NOT EDIT.
// Source: internal/student/client.go

// Package student is a generated GoMock package.
package student

import (
	context "context"
	reflect "reflect"

	studentServiceApi "github.com/danilashushkanov/student-service/pkg/studentServiceApi"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockServices is a mock of Services interface.
type MockServices struct {
	ctrl     *gomock.Controller
	recorder *MockServicesMockRecorder
}

// MockServicesMockRecorder is the mock recorder for MockServices.
type MockServicesMockRecorder struct {
	mock *MockServices
}

// NewMockServices creates a new mock instance.
func NewMockServices(ctrl *gomock.Controller) *MockServices {
	mock := &MockServices{ctrl: ctrl}
	mock.recorder = &MockServicesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServices) EXPECT() *MockServicesMockRecorder {
	return m.recorder
}

// CreateStudent mocks base method.
func (m *MockServices) CreateStudent(ctx context.Context, in *studentServiceApi.CreateStudentRequest, opts ...grpc.CallOption) (*studentServiceApi.Student, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateStudent", varargs...)
	ret0, _ := ret[0].(*studentServiceApi.Student)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStudent indicates an expected call of CreateStudent.
func (mr *MockServicesMockRecorder) CreateStudent(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStudent", reflect.TypeOf((*MockServices)(nil).CreateStudent), varargs...)
}

// CreateTeacher mocks base method.
func (m *MockServices) CreateTeacher(ctx context.Context, in *studentServiceApi.CreateTeacherRequest, opts ...grpc.CallOption) (*studentServiceApi.Teacher, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTeacher", varargs...)
	ret0, _ := ret[0].(*studentServiceApi.Teacher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTeacher indicates an expected call of CreateTeacher.
func (mr *MockServicesMockRecorder) CreateTeacher(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTeacher", reflect.TypeOf((*MockServices)(nil).CreateTeacher), varargs...)
}

// DeleteStudent mocks base method.
func (m *MockServices) DeleteStudent(ctx context.Context, in *studentServiceApi.GetStudentRequest, opts ...grpc.CallOption) (*studentServiceApi.SimpleResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteStudent", varargs...)
	ret0, _ := ret[0].(*studentServiceApi.SimpleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteStudent indicates an expected call of DeleteStudent.
func (mr *MockServicesMockRecorder) DeleteStudent(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStudent", reflect.TypeOf((*MockServices)(nil).DeleteStudent), varargs...)
}

// GetStudent mocks base method.
func (m *MockServices) GetStudent(ctx context.Context, in *studentServiceApi.GetStudentRequest, opts ...grpc.CallOption) (*studentServiceApi.Student, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetStudent", varargs...)
	ret0, _ := ret[0].(*studentServiceApi.Student)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStudent indicates an expected call of GetStudent.
func (mr *MockServicesMockRecorder) GetStudent(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStudent", reflect.TypeOf((*MockServices)(nil).GetStudent), varargs...)
}

// ListStudents mocks base method.
func (m *MockServices) ListStudents(ctx context.Context, in *studentServiceApi.ListStudentRequest, opts ...grpc.CallOption) (*studentServiceApi.ListStudentResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListStudents", varargs...)
	ret0, _ := ret[0].(*studentServiceApi.ListStudentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStudents indicates an expected call of ListStudents.
func (mr *MockServicesMockRecorder) ListStudents(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStudents", reflect.TypeOf((*MockServices)(nil).ListStudents), varargs...)
}

// ListTeachers mocks base method.
func (m *MockServices) ListTeachers(ctx context.Context, in *studentServiceApi.ListTeacherRequest, opts ...grpc.CallOption) (*studentServiceApi.ListTeacherResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTeachers", varargs...)
	ret0, _ := ret[0].(*studentServiceApi.ListTeacherResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTeachers indicates an expected call of ListTeachers.
func (mr *MockServicesMockRecorder) ListTeachers(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTeachers", reflect.TypeOf((*MockServices)(nil).ListTeachers), varargs...)
}

// PatchStudent mocks base method.
func (m *MockServices) PatchStudent(ctx context.Context, in *studentServiceApi.UpdateStudentRequest, opts ...grpc.CallOption) (*studentServiceApi.Student, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchStudent", varargs...)
	ret0, _ := ret[0].(*studentServiceApi.Student)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PatchStudent indicates an expected call of PatchStudent.
func (mr *MockServicesMockRecorder) PatchStudent(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchStudent", reflect.TypeOf((*MockServices)(nil).PatchStudent), varargs...)
}

// PatchTeacher mocks base method.
func (m *MockServices) PatchTeacher(ctx context.Context, in *studentServiceApi.UpdateTeacherRequest, opts ...grpc.CallOption) (*studentServiceApi.Teacher, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchTeacher", varargs...)
	ret0, _ := ret[0].(*studentServiceApi.Teacher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PatchTeacher indicates an expected call of PatchTeacher.
func (mr *MockServicesMockRecorder) PatchTeacher(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchTeacher", reflect.TypeOf((*MockServices)(nil).PatchTeacher), varargs...)
}
